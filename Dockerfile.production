# Multi-stage production Dockerfile for DGDN
FROM python:3.12-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements first for better caching
COPY requirements.txt /tmp/
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Production stage
FROM python:3.12-slim

# Create non-root user
RUN groupadd -r dgdn && useradd -r -g dgdn dgdn

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY src/ ./src/
COPY examples/ ./examples/
COPY pyproject.toml ./
COPY README.md ./
COPY lightweight_demo.py ./
COPY deployment_verification.py ./

# Create necessary directories
RUN mkdir -p logs data configs && \
    chown -R dgdn:dgdn /app

# Switch to non-root user
USER dgdn

# Set Python path
ENV PYTHONPATH=/app/src:$PYTHONPATH

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python3 -c "import sys; sys.path.insert(0, '/app/src'); import dgdn; print('OK')" || exit 1

# Default command - can be overridden
CMD ["python3", "lightweight_demo.py"]