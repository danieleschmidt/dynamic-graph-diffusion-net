version: '3.8'

services:
  dgdn-api:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
      target: production
    container_name: dgdn-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DGDN_ENV=production
      - DGDN_LOG_LEVEL=INFO
      - DGDN_REDIS_URL=redis://redis:6379
      - DGDN_POSTGRES_URL=postgresql://dgdn:${POSTGRES_PASSWORD}@postgres:5432/dgdn
    volumes:
      - dgdn_models:/app/models
      - dgdn_logs:/app/logs
      - dgdn_data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - dgdn-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  dgdn-worker:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile
      target: production
    container_name: dgdn-worker
    restart: unless-stopped
    command: ["python", "-m", "dgdn.worker", "--config", "configs/worker.yaml"]
    environment:
      - DGDN_ENV=production
      - DGDN_LOG_LEVEL=INFO
      - DGDN_REDIS_URL=redis://redis:6379
      - DGDN_POSTGRES_URL=postgresql://dgdn:${POSTGRES_PASSWORD}@postgres:5432/dgdn
    volumes:
      - dgdn_models:/app/models
      - dgdn_logs:/app/logs
      - dgdn_data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - dgdn-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  redis:
    image: redis:7-alpine
    container_name: dgdn-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - dgdn_redis:/data
    networks:
      - dgdn-network

  postgres:
    image: postgres:15-alpine
    container_name: dgdn-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=dgdn
      - POSTGRES_USER=dgdn
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - dgdn_postgres:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dgdn-network

  nginx:
    image: nginx:alpine
    container_name: dgdn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - dgdn-api
    networks:
      - dgdn-network

  prometheus:
    image: prom/prometheus:latest
    container_name: dgdn-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - dgdn_prometheus:/prometheus
    networks:
      - dgdn-network

  grafana:
    image: grafana/grafana:latest
    container_name: dgdn-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - dgdn_grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dgdn-network

volumes:
  dgdn_models:
  dgdn_logs:
  dgdn_data:
  dgdn_redis:
  dgdn_postgres:
  dgdn_prometheus:
  dgdn_grafana:

networks:
  dgdn-network:
    driver: bridge