# Main CI/CD Workflow Template
# Copy to .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION_DEFAULT: "3.9"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run pre-commit hooks
        run: pre-commit run --all-files
        
      - name: Check imports with isort
        run: isort --check-only --diff .
        
      - name: Type checking with mypy
        run: mypy src/

  test-matrix:
    name: Test (Python ${{ matrix.python-version }}, PyTorch ${{ matrix.torch-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        torch-version: ["1.12.0", "2.0.0", "2.1.0"]
        exclude:
          - python-version: "3.11"
            torch-version: "1.12.0"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          
      - name: Install PyTorch ${{ matrix.torch-version }}
        run: |
          pip install torch==${{ matrix.torch-version }} --index-url https://download.pytorch.org/whl/cpu
          
      - name: Install package and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          
      - name: Run tests with coverage
        run: |
          pytest --cov=dgdn --cov-report=xml --cov-report=term-missing -v
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --timeout=300
          
      - name: Test installation from wheel
        run: |
          python -m build
          pip install dist/*.whl
          python -c "import dgdn; print(f'DGDN version: {dgdn.__version__}')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety bandit semgrep
          
      - name: Run safety check for known vulnerabilities
        run: safety check
        
      - name: Run bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  build-and-test-package:
    name: Build and Test Package
    runs-on: ubuntu-latest
    needs: [test-matrix]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Check package with twine
        run: twine check dist/*
        
      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import dgdn; print('Package imported successfully')"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  performance-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-benchmark
          
      - name: Run performance benchmarks
        run: |
          pytest benchmarks/ --benchmark-json=benchmark.json
          
      - name: Compare with baseline
        run: |
          # Add logic to compare with main branch benchmarks
          echo "Performance check completed"
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

  publish-to-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build-and-test-package, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: test-pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/
          
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [publish-to-test-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-to-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release
            
            Please see the [CHANGELOG](CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ```bash
            pip install dynamic-graph-diffusion-net==${{ github.ref_name }}
            ```
          draft: false
          prerelease: false