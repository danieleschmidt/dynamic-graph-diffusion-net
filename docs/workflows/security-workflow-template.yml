# Security Scanning Workflow Template
# Copy to .github/workflows/security.yml

name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety pip-audit
          
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true
        
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: |
            safety-report.json
            pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
          
      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt -o bandit-report.txt
        continue-on-error: true
        
      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/
        continue-on-error: true
        
      - name: Upload security analysis reports
        uses: actions/upload-artifact@v3
        with:
          name: security-analysis
          path: |
            bandit-report.json
            bandit-report.txt
            semgrep-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install cyclonedx-bom pip-licenses
          
      - name: Generate CycloneDX SBOM
        run: |
          cyclonedx-py -o dgdn-sbom.json
          
      - name: Generate licenses report
        run: |
          pip-licenses --format=json --output-file=licenses-report.json
          
      - name: Upload SBOM and licenses
        uses: actions/upload-artifact@v3
        with:
          name: sbom-and-licenses
          path: |
            dgdn-sbom.json
            licenses-report.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip for scheduled runs
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t dgdn:security-scan .
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dgdn:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: SLSA Provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.7.0
        with:
          base64-subjects: ${{ needs.build.outputs.hashes }}
          
      - name: Verify dependencies with Scorecard
        uses: ossf/scorecard-action@v2.2.0
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scorecard-results.sarif

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "‚ùå SECURITY.md file is missing"
            exit 1
          else
            echo "‚úÖ SECURITY.md file exists"
          fi
          
      - name: Validate security policy content
        run: |
          if grep -q "security@" SECURITY.md; then
            echo "‚úÖ Security contact found in SECURITY.md"
          else
            echo "‚ö†Ô∏è No security contact found in SECURITY.md"
          fi
          
      - name: Check for vulnerability disclosure process
        run: |
          if grep -qi "vulnerability\|disclosure\|report" SECURITY.md; then
            echo "‚úÖ Vulnerability disclosure process documented"
          else
            echo "‚ùå Vulnerability disclosure process not clearly documented"
            exit 1
          fi

  create-security-report:
    name: Create Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan, sbom-generation]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all security artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          cat << 'EOF' > security-summary.md
          # Security Scan Summary
          
          ## Scan Date
          $(date -u)
          
          ## Scans Performed
          - ‚úÖ Dependency vulnerability scan (Safety, pip-audit)
          - ‚úÖ Code security analysis (Bandit, Semgrep)
          - ‚úÖ Secrets detection (TruffleHog)
          - ‚úÖ SBOM generation (CycloneDX)
          - ‚úÖ License compliance check
          
          ## Results
          Please check individual scan reports in the artifacts for detailed findings.
          
          ## Next Steps
          1. Review all findings in the security reports
          2. Address high and critical vulnerabilities immediately
          3. Update dependencies with known vulnerabilities
          4. Fix any code security issues identified
          
          ## Compliance Status
          - [x] Security policy exists (SECURITY.md)
          - [x] Vulnerability disclosure process documented
          - [x] SBOM generated and available
          - [x] License compliance verified
          EOF
          
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
          
      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîí Security Scan Results\n\n${summary}`
            });