# Release Automation Workflow Template
# Copy this file to .github/workflows/release.yml

name: üöÄ Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v<major>.<minor>.<patch>[-<suffix>]"
            exit 1
          fi
          echo "‚úÖ Version format is valid"

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ -f CHANGELOG.md ]]; then
            # Extract changelog section for this version
            CHANGELOG=$(sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | head -n -1)
            if [[ -z "$CHANGELOG" ]]; then
              CHANGELOG="No changelog entry found for version ${VERSION}"
            fi
          else
            CHANGELOG="No CHANGELOG.md file found"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-and-test:
    name: üèóÔ∏è Build and Test
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -e ".[dev]"

      - name: Run tests
        run: |
          make test-cov
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          python -m twine check dist/*
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-${{ needs.validate-release.outputs.version }}
          path: dist/

  test-install:
    name: üß™ Test Installation
    runs-on: ${{ matrix.os }}
    needs: [validate-release, build-and-test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: package-${{ needs.validate-release.outputs.version }}
          path: dist/
          
      - name: Test wheel installation
        run: |
          pip install dist/*.whl
          python -c "import dgdn; print(f'DGDN {dgdn.__version__} installed successfully')"
          
      - name: Test source installation
        run: |
          pip uninstall -y dgdn
          pip install dist/*.tar.gz
          python -c "import dgdn; print(f'DGDN {dgdn.__version__} installed successfully')"

  publish-test-pypi:
    name: üì¶ Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, test-install]
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/dgdn
    
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: package-${{ needs.validate-release.outputs.version }}
          path: dist/
          
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

  publish-pypi:
    name: üì¶ Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, test-install]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/dgdn
    
    steps:
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: package-${{ needs.validate-release.outputs.version }}
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  create-github-release:
    name: üè∑Ô∏è Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, test-install, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: package-${{ needs.validate-release.outputs.version }}
          path: dist/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: |
            ## üöÄ DGDN ${{ needs.validate-release.outputs.version }}
            
            ${{ needs.validate-release.outputs.changelog }}
            
            ## üì¶ Installation
            
            ```bash
            pip install dgdn==${{ needs.validate-release.outputs.version }}
            ```
            
            ## üîó Links
            
            - üìñ [Documentation](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/README.md)
            - üìã [Changelog](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/CHANGELOG.md)
            - üêõ [Issues](https://github.com/${{ github.repository }}/issues)
            
            ---
            
            ü§ñ *This release was created automatically by GitHub Actions*
          files: |
            dist/*
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
          generate_release_notes: true

  deploy-docs:
    name: üìö Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(needs.validate-release.outputs.version, '-')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install documentation dependencies
        run: |
          pip install -e ".[docs]"
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
          cname: dgdn.example.com  # Replace with your custom domain

  notify-success:
    name: üéâ Notify Success
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi, create-github-release, deploy-docs]
    if: always() && (needs.publish-pypi.result == 'success' || needs.create-github-release.result == 'success')
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ Release ${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "üì¶ Package published to PyPI"
          echo "üè∑Ô∏è GitHub release created"
          echo "üìö Documentation deployed"

  notify-failure:
    name: ‚ùå Notify Failure
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, test-install, publish-pypi, create-github-release, deploy-docs]
    if: always() && contains(needs.*.result, 'failure')
    
    steps:
      - name: Failure notification
        run: |
          echo "‚ùå Release ${{ needs.validate-release.outputs.version }} failed!"
          echo "Please check the workflow logs for details."
          exit 1